#!/bin/ash
#
# Wallet Omle shmollet
# see https://www.urbandictionary.com/define.php?term=Omle%20shmollet

set -o pipefail

help() {
cat <<EOF
Usage: wosh <command> [args]

Commands:
  init <privkey> <addr>
   - initialize a new config in current directory
  gini
   - generate a new privkey and address using bth.sh
     (which in turn uses the libbtc bitcointool)
  gen [number_of_blocks]
   - on regtest generate a number_of_blocks
     to configured address addr
  list
   - scan for txoutset of configured address
  send <address> <amount>
   - send <amount> to <address>, change goes back
     to the address configured at initialization
  getbalance
   - print current balance (including unmature)
  cons
   - consolidate outputs on the address
EOF
exit
}

test "$1" = "-h" && help
add=$(echo ${PWD} | md5sum | cut -b-7)
tmp=/tmp/wosh-$add
mkdir -p $tmp
lock=$PREFIX/tmp/lock-$add

rcfile=$PWD/wosh.cat
init() {
  test -r $rcfile && { echo "$rcfile already exists!"; exit 1; }
  test "$1" = "" && { echo "Missing <privkey> argument!"; help; }
  test "$2" = "" && { echo "Missing <addr> argument!"; help; }

  cat > $rcfile <<-EOF
	privkey=$1
	addr=$2
	EOF
}

gini() {
  privkey=$(bth.sh -c genkey | grep WIF | cut -d: -f2)
  pub=$(bth.sh -c pubfrompriv -p $privkey | grep ^pubkey: | cut -d: -f2)
  bech32=$(bth.sh -c addrfrompub -k $pub | grep ^p2wpkh | cut -d: -f2)
  init $privkey $bech32
}

gen() {
  . $rcfile || exit 1
  bch.sh generatetoaddress ${1:-1} $addr
  rm $rcfile-lastamount $rcfile-last 2>/dev/null
}

list() {
  sto |
  {
    read l; read l; read l
    read l4
    { printf "height="; echo $l4 | cut -d: -f2 | tr -d ' ,'; } \
      > $rcfile-height
    read l; read l; read l
    echo "$l4" > $tmp/lines
    cat \
    | tr -d '\n' | tr '{' '\n' \
    | cut -d, -f1,2,5,6,7 | tr ',' ':' | cut -d: -f2,4,6,8,10 \
    | tr -d ' "}\]' \
    | tr : " " \
    | sort -n -t " " -k 3
  } | tee $tmp/listnew-$$
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  mv $tmp/listnew-$$ $rcfile-list
  rmdir $lock 2>/dev/null
}

compute() {
  result=$(echo "scale=8; $1" | bc)
  echo $result | grep -q '^\.' && result=0$result
  echo $result | grep -q '^-\.' && result=-0$result
  echo $result
}

getbalance() {
  list >/dev/null
  first=0
  if
    test $(cat $rcfile-list | wc -l) -ge 2
  then
  { cat $rcfile-list | while read txid vout amount coinbase hei rest
  do
    test $first -ge 2 && printf '%s\n' "+"
    first=$(($first+1))
    echo "$amount"
  done; echo "+"; echo p; } | dc
  else
    cut -d " " -f3 < $rcfile-list
  fi
}

genfromlist() {
  amount=0
  first=0
  total=0
  list >/dev/null
  . $rcfile-height
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  shuf $rcfile-list | while read txid vout amount coinbase hei rest
  do
    test "$coinbase" = "true" && \
      test $hei -gt $(($height-100)) && continue
    test $first -eq 1 && printf '%s' ","
    first=1
    printf '%s' '''{"txid":"'$txid'","vout":'$vout'}'''
    total=$(compute "$total+$amount")
    echo $total > $tmp/totalnew
    mv $tmp/totalnew $tmp/total
  done > $tmp/utxonew
  mv $tmp/utxonew $tmp/utxo
  rmdir $lock 2>/dev/null
}

genlastc() {
  txid=$(cat $rcfile-last)
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  bch.sh gettxout $txid 0 \
    | grep value | cut -d: -f2- | tr -d ' ,' \
    > $tmp/lastcnew
  mv $tmp/lastcnew $tmp/lastamount
  rmdir $lock 2>/dev/null
}

genfromlast() {
  txid=$(cat $rcfile-last)
  genlastc
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  cat $rcfile-lastamount > $tmp/totalnew
  mv $tmp/totalnew $tmp/total
  printf '%s' '''{"txid":"'$txid'","vout":0}''' > $tmp/utxonew
  mv $tmp/utxonew $tmp/utxo
  rmdir $lock 2>/dev/null
}

gentx() {
  . $rcfile || exit 1
  fee=${1:-0}
  test "$fee" = "0" && fee=$(bch.sh estimatesmartfee 1 | jq ".feerate * 5 / 1000 * 100000000")
  faucet=${2:-0}
  fake=${3:-0}
  if test -r $rcfile-last
  then genfromlast
  else genfromlist
  fi
  total=$(cat $tmp/total)
  total=$(compute "${total}-($fee/100000000)")
  #echo $total >&2
  if
    test "$faucet" = "0"
  then
    outs='''{"'$addr'":'$total'}'''
    outs='''{"'$addr'":'$total'},{"data":"6c6561726e20426974636f696e"}'''
    until mkdir $lock 2>/dev/null; do sleep 0.5; done
    echo $total > $rcfile-lastamountnew
    mv $rcfile-lastamountnew $rcfile-lastamount
    rmdir $lock 2>/dev/null
  else
    ranmin=$(compute "(${RANDOM}+50000)/100000000")
    #echo $ranmin >&2
    rest=$(compute "${total}-$ranmin")
    #echo $rest >&2
    outs='''{"'$addr'":'$rest'},{"'$faucet'":'$ranmin'},{"data":"6c6561726e20426974636f696e"}'''
    until mkdir $lock 2>/dev/null; do sleep 0.5; done
    echo $rest > $rcfile-lastamountnew
    test "$fake" = "0" && mv $rcfile-lastamountnew $rcfile-lastamount
    rmdir $lock 2>/dev/null
  fi
  #echo $outs >&2
  {
  cat <<-EOF
	[$(cat $tmp/utxo)]
	[$outs]
	0
	true
	EOF
  }
}

gentxall() {
  . $rcfile || exit 1
  fee=${1:-0}
  addr=${2:-0}
  fake=${3:-0}
  if test -r $rcfile-last
  then genfromlast
  else genfromlist
  fi
  total=$(cat $tmp/total)
  total=$(compute "${total}-($fee/100000000)")
  #echo $total >&2
  outs='''{"'$addr'":'$total'}'''
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  echo $total > $rcfile-lastamountnew
  mv $rcfile-lastamountnew $rcfile-lastamount
  rmdir $lock 2>/dev/null
  #echo $outs >&2
  {
  cat <<-EOF
	[$(cat $tmp/utxo)]
	[$outs]
	0
	true
	EOF
  }
}

# sendall <addr> - sends all to <addr> with minimal fee
sendall() {
  fee=$(gentxall ${2:-"0"} ${1:-"0"} 1 \
    | crt | srt | drt | grep vsize | cut -d: -f2 | tr -d ' ,"')
  #echo $fee >&2
  gentxall ${2:-$fee} ${1:-0} | crt | srt | sert | tee $rcfile-lastnew
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  test -s $rcfile-lastnew && mv $rcfile-lastnew $rcfile-last
  rmdir $lock 2>/dev/null
}

# send <addr> - sends from faucet to <addr>, change back to faucet
send() {
  fee=$(gentx ${2:-"0"} ${1:-"0"} 1 \
    | crt | srt | drt | grep vsize | cut -d: -f2 | tr -d ' ,"')
  #echo $fee >&2
  gentx ${2:-$fee} ${1:-0} | crt | srt | sert | tee $rcfile-lastnew
  #gentx 0 ${1:-0} | crt | srt | sert | tee $rcfile-lastnew
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  test -s $rcfile-lastnew && mv $rcfile-lastnew $rcfile-last
  rmdir $lock 2>/dev/null
}

# ssend <addr> - sends from faucet to <addr>, change back to faucet
#  using a smart 1 block fee
ssend() (
  size=$(gentx ${2:-0} ${1:-0} 1 \
    | crt | srt | drt | grep vsize | cut -d: -f2 | tr -d ' ,"')
  fee=$(bch.sh estimatesmartfee 1 \
    | compute "$(grep -m1 feerate | cut -d: -f2- | tr -d '. ",')/1000*$size")
  #echo $fee >&2
  gentx ${2:-$fee} ${1:-0} | crt | srt | sert | tee $rcfile-lastnew
  #gentx 0 ${1:-0} | crt | srt | sert | tee $rcfile-lastnew
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  test -s $rcfile-lastnew && mv $rcfile-lastnew $rcfile-last
  rmdir $lock 2>/dev/null
)

cons() {
  . $rcfile || exit 1
  gentx $addr
}

consagen() {
  cons
  gen
}

print() {
  . $rcfile || exit 1
  echo $addr
}

# Misc functions to ease typing

crt() {
  bch.sh -stdin createrawtransaction
}

drt() {
  bch.sh -stdin decoderawtransaction
}

srt() {
  . $rcfile || exit 1
  {
  cat
  echo '''["'$privkey'"]'''
  } | bch.sh -stdin signrawtransactionwithkey \
    | grep '"hex"' \
    | cut -d: -f2- \
    | tr -d ' ,"'
}

sert() {
  bch.sh -stdin sendrawtransaction
}

sto() {
  . $rcfile || exit 1
  bch.sh scantxoutset start '''["addr('$addr')"]'''
}

"$@"
