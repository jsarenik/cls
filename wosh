#!/bin/ash
#
# Wallet Omle shmollet
# see https://www.urbandictionary.com/define.php?term=Omle%20shmollet

set -o pipefail

help() {
cat <<EOF
Usage: wosh <command> [args]

Commands:
  init <privkey> <addr>
   - initialize a new config in current directory
  gini
   - generate a new privkey and address using bitcointool
  gen [number_of_blocks]
   - on regtest generate a number_of_blocks
     to configured address addr
  list
   - scan for txoutset of configured address
  send <address> <amount>
   - send <amount> to <address>, change goes back
     to the address configured at initialization
  getbalance
   - print current balance (including unmature)
  cons
   - consolidate outputs on the address
EOF
exit
}

notfound() {
  echo "Configuration file not found!"
  help
}

test "$1" = "-h" && help
add=$(echo ${PWD} | md5sum | cut -b-7)
export tmp=/tmp/wosh-$add
mkdir -p $tmp
export lock=$PREFIX/tmp/lock-$add

rcfile=$PWD/wosh.cat
init() (
  test -r $rcfile && { echo "$rcfile already exists!"; exit 1; }
  test "$1" = "" && { echo "Missing <privkey> argument!"; help; }
  test "$2" = "" && { echo "Missing <addr> argument!"; help; }

  cat > $rcfile <<-EOF
	privkey=$1
	addr=$2
	EOF
)

gini() (
  privkey=$(bth -c genkey | grep WIF | cut -d: -f2)
  pub=$(bth -c pubfrompriv -p $privkey | grep ^pubkey: | cut -d: -f2)
  bech32=$(bth -c addrfrompub -k $pub | grep ^p2wpkh | cut -d: -f2)
  init $privkey $bech32
)

gen() (
  . $rcfile || exit 1
  printf "%s\n%s\n" ${1:-1} $addr | bch -stdin generatetoaddress
  rm $tmp/lastamount $tmp/last 2>/dev/null
)

list() (
  sto |
  {
    read l; read l; read l
    read l4
    { printf "height="; echo $l4 | cut -d: -f2 | tr -d ' ,'; } \
      | safecat $rcfile-height
    read l; read l; read l
    #echo "$l4" > $tmp/lines
    cat \
    | tr -d '\n' | tr '{' '\n' \
    | cut -d, -f1,2,5,6,7 | tr ',' ':' | cut -d: -f2,4,6,8,10 \
    | tr -d ' "}\]' \
    | tr : " " \
    | sort -n -t " " -k 5
  } | safetee $rcfile-list
)

compute() (
  result=$(echo "scale=8; $1" | bc)
  echo $result | grep -q '^\.' && result=0$result
  echo $result
)

getbalance() (
  list >/dev/null
  first=0
  if
    test $(cat $rcfile-list | wc -l) -ge 2
  then
  { cat $rcfile-list | while read txid vout amount coinbase hei rest
  do
    test $first -ge 2 && printf '%s\n' "+"
    first=$(($first+1))
    echo "$amount"
  done; echo "+"; echo p; } | dc
  else
    cut -d " " -f3 < $rcfile-list
  fi
)

genfromlist() (
  amount=0
  first=0
  total=0
  list >/dev/null
  . $rcfile-height
  shuf $rcfile-list | while read txid vout amount coinbase hei rest
  do
    test $hei -gt $(($height-100)) && continue
    test $first -eq 1 && printf '%s' ","
    first=1
    printf '%s' '''{"txid":"'$txid'","vout":'$vout'}'''
    total=$(compute "$total+$amount")
    echo $total | safecat $tmp/total
  done | safecat $tmp/utxo
)

safe() {
  otmp=$(mktemp)
  cat > $otmp
  until mkdir $lock 2>/dev/null; do sleep 0.5; done
  test -s $otmp && mv $otmp $1
  rmdir $lock 2>/dev/null
}

safecat() (
  safe $1
)

safetee() (
  safe $1
  cat $1
)

genlastc() (
  txid=$(cat $tmp/last)
  bch gettxout $txid 0 \
    | grep value | cut -d: -f2- | tr -d ' ,' \
    | safecat $tmp/lastamount
)

genfromlast() (
  txid=$(cat $tmp/last)
  genlastc
  cat $tmp/lastamount | safecat $tmp/total
  printf '%s' '''{"txid":"'$txid'","vout":0}''' | safecat $tmp/utxo
)

gentx() (
  . $rcfile || exit 1
  fee=${1:-0}
  faucet=${2:-0}
  fake=${3:-0}
  if test -r $tmp/last
  then genfromlast
  else genfromlist
  fi
  total=$(cat $tmp/total)
  total=$(compute "$total-($fee/100000000)")
  #echo $total >&2
  if
    test "$faucet" = "0"
  then
    outs='''{"'$addr'":'$total'}'''
    echo $total | safecat $tmp/lastamount
  else
    ranmin=$(compute "($RANDOM+50000)/100000000")
    #echo $ranmin >&2
    rest=$(compute "$total-$ranmin")
    #echo $rest >&2
    outs='''{"'$addr'":'$rest'},{"'$faucet'":'$ranmin'}'''
    test "$fake" = "0" && echo $rest | safecat $tmp/lastamount
  fi
  #echo $outs >&2
  {
  cat <<-EOF
	[$(cat $tmp/utxo)]
	[$outs]
	0
	true
	EOF
  }
)

# Add sendall from singer

# send [addr] [fee] - sends from faucet to <addr>, change back to faucet
send() (
  exec 2>/dev/null
  fee=$(gentx ${2:-0} ${1:-0} 1 \
    | crt | srt | drt | grep vsize | cut -d: -f2 | tr -d ' ,"' | grep .) \
    || exit 23
  #echo $fee >&2
  gentx ${2:-$fee} ${1:-0} | crt | srt | sert | safetee $tmp/last \
    grep . || exit
)

cons() (
  . $rcfile || exit 1
  send $addr
)

consagen() (
  cons
  gen
)

print() (
  . $rcfile || exit 1
  echo $addr
)

# Misc functions to ease typing

crt() (
  bch -stdin createrawtransaction
)

drt() (
  bch -stdin decoderawtransaction
)

srt() (
  . $rcfile || notfound
  {
  cat
  echo '''["'$privkey'"]'''
  } | bch -stdin signrawtransactionwithkey \
    | grep '"hex"' \
    | cut -d: -f2- \
    | tr -d ' ,"'
)

sert() (
  bch -stdin sendrawtransaction
)

sto() (
  . $rcfile || exit 1
  printf '%s\n%s\n' start '''["addr('$addr')"]''' | bch -stdin scantxoutset
)

clean() (
  bch stop
  cd ../..
  while kill -0 $(cat bitcoind.pid 2>/dev/null) 2>/dev/null
  do printf .;  sleep 1; done; echo
  rm -rf blocks indexes chainstate wallets/default *.json *.dat wosh*
  blocknotify.sh -c
)

setbchain() {
  test "${PWD##*/}" = "signet" && chain=signet
  test "${PWD##*/}" = "testnet3" && chain=test
  test "${PWD##*/}" = "regtest" && chain=regtest
  test "$chain" = "" || ddir=${PWD%/*}
}

# Bitcoin Client Here - starts a bitcoin-cli in current directory
bch() (
  test -d .bitcoin && cd .bitcoin
  test -d "$1" && { cd "$1"; shift; }
  test -r wallet.dat && { wallet="-rpcwallet=${PWD##*/}"; cd ..; }
  echo $PWD | grep -q wosh- && test -r wosh.cat && cd ..
  test "${PWD##*/}" = "wallets" && cd ..
  setbchain
  bitcoin-cli $wallet "-datadir=${ddir:-$PWD}" \
    -chain=${chain:-main} "$@"
)

# Bitcoin Tool Here - starts bitcointool with network parameter
bth() (
  test -d "$1" && { cd "$1"; shift; }
  echo $PWD | grep -q wosh- && cd ..
  test "${PWD##*/}" = "wallets" && cd ..
  test "${PWD##*/}" = "signet" && chain=-t
  test "${PWD##*/}" = "testnet3" && chain=-t
  test "${PWD##*/}" = "regtest" && chain=-r
  bitcointool ${chain} "$@"
)

"$@"
